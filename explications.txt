üê≥ docker-compose.yml

version: "3.8"  # Utilise la syntaxe Docker Compose version 3.8 (Docker 19.03+)

services:
  jenkins:
    build: .  # Utilise le Dockerfile pr√©sent dans le r√©pertoire courant
    ports:
      - "8080:8080"  # Acc√®s √† Jenkins via http://localhost:8080
    environment:
      - USER_CHOCOLATEEN_PASSWORD=chocolateen
      - USER_VAUGIE_G_PASSWORD=vaugieG
      - USER_I_DONT_KNOW_PASSWORD=iDontKnow
      - USER_NASSO_PASSWORD=nasso
      # Variables d‚Äôenvironnement pour les mots de passe (utilis√©es par JCasC)
    volumes:
      - jenkins_home:/var/jenkins_home  # Persistance des donn√©es Jenkins

volumes:
  jenkins_home:  # D√©claration du volume utilis√© ci-dessus


üê≥ Dockerfile

FROM jenkins/jenkins:lts  # Image Jenkins officielle (LTS = stable)

USER root  # Passage en root pour installation de paquets

RUN apt-get update && apt-get install -y make build-essential
# Outils n√©cessaires pour les √©tapes de build/test

COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
RUN jenkins-plugin-cli --plugin-file /usr/share/jenkins/ref/plugins.txt
# Installation des plugins list√©s dans plugins.txt

COPY my_marvin.yml /var/jenkins_home/my_marvin.yml
COPY job_dsl.groovy /var/jenkins_home/job_dsl.groovy
# Fichiers de configuration copi√©s dans Jenkins

ENV CASC_JENKINS_CONFIG=/var/jenkins_home/my_marvin.yml
# Utilisation de JCasC pour configurer Jenkins automatiquement

USER jenkins  # Retour √† l'utilisateur Jenkins pour ex√©cuter en s√©curit√©


üìÇ plugins.txt

cloudbees-folder : support des dossiers dans Jenkins.

configuration-as-code : pour configurer Jenkins via YAML.

credentials : gestion des identifiants (secrets, mots de passe).

github : int√©gration GitHub.

instance-identity : identifiant unique Jenkins (souvent requis).

job-dsl : pour cr√©er dynamiquement des jobs via du code Groovy.

script-security : s√©curise les scripts groovy ex√©cut√©s dans Jenkins.

structs : d√©pendance pour plusieurs plugins.

role-strategy : permet la gestion fine des droits par r√¥le.

ws-cleanup : pour nettoyer les workspaces entre les builds.


üìú my_marvin.yml (Jenkins Configuration as Code)

jenkins:
  systemMessage: "Welcome to the Chocolatine-Powered Marvin Jenkins Instance." #Message affich√© dans l‚Äôinterface Jenkins.

    üîê Authentification

    securityRealm:
        local:
            allowsSignup: false
            users:
    #Active une authentification locale avec une liste d'utilisateurs d√©finis dans le fichier.

    Chaque utilisateur a :
        - id: chocolateen #identifiant utilisateur pour Jenkins.
          name: Hugo #nom affich√©.
          password: "${USER_CHOCOLATEEN_PASSWORD}" #r√©cup√©r√© via les variables d'environnement du docker-compose.

    üîí Autorisations

    authorizationStrategy:
        roleBased:
        roles:
            global:
    #Active la strat√©gie d‚Äôautorisations bas√©e sur les r√¥les (n√©cessite role-strategy).

    Exemple :
          - name: admin
            permissions:
              - "Overall/Administer"
            entries:
              - user: "chocolateen"
    #Donne les droits admin complets √† chocolateen.

    #Les autres r√¥les (ape, gorilla, assist) ont des permissions plus ou moins restreintes selon leur fonction.

    üì¶ Jobs auto-g√©n√©r√©s

    jobs:
        - file: /var/jenkins_home/job_dsl.groovy
    #Charge dynamiquement les jobs d√©finis dans le script job_dsl.groovy via le plugin Job DSL.

    üåê URL de Jenkins

    unclassified:
        location:
            url: http://localhost:8080/
    #Sp√©cifie l‚ÄôURL publique de Jenkins (utile pour les liens envoy√©s par mail ou vers GitHub).


üß† job_dsl.groovy ‚Äì Cr√©ation de jobs via code

    üìÅ Dossier "Tools"

    folder('Tools') {
        description('Folder for miscellaneous tools.')
    }
    #Cr√©e un dossier Jenkins nomm√© Tools pour organiser les jobs.

    üîÑ Job clone-repository

    #Job simple qui clone un repo Git donn√©.

    job('Tools/clone-repository') {
        wrappers {
            preBuildCleanup() #nettoie l‚Äôenvironnement avant chaque build.
        }
        parameters {
            stringParam('GIT_REPOSITORY_URL', '', 'Git URL of the repository to clone') #permet √† l‚Äôutilisateur de passer l‚ÄôURL du repo.
        }
        steps {
            shell('git clone $GIT_REPOSITORY_URL') #lance la commande de clonage.
        }
    }

    üå± Job SEED

    #Job qui g√©n√®re dynamiquement un autre job Jenkins √† partir du d√©p√¥t Git sp√©cifi√©.

    job('Tools/SEED') {
        parameters {
            stringParam('GITHUB_NAME', '', 'GitHub repository owner/repo_name')
            stringParam('DISPLAY_NAME', '', 'DAisplay name for the job')
        }
        steps {
            dsl {
                text('''
                    job("$DISPLAY_NAME") {
                        ...
                    }
                ''')
            }
        }
    }

    #Utilise Job DSL pour cr√©er un job qui :
        - Cl√¥ne le repo GitHub
        - S‚Äôex√©cute toutes les minutes (scm('* * * * *'))
        - Lance une suite de commandes Make (fclean, make, tests_run, clean)